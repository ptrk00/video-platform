version: '3.8'

services:
  uploader:
    container_name: uploader
    hostname: uploader
    image: elearning-uploader
    build:
      context: .
      dockerfile: uploader/Dockerfile
    expose:
      - '8080'
    ports:
      - '8080:8080'
    environment:
      PORT: 8080
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_BUCKET: videos
      VIDEO_FORM_FILENAME: myfile
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      postgresssetup:
        condition: service_completed_successfully
      natssetup:
        condition: service_completed_successfully
      miniosetup:
        condition: service_completed_successfully
      vault-agent:
        condition: service_healthy

    volumes:
      - ./volumes/vault/agent:/etc/vault
      - secrets:/vault/secrets
    entrypoint: ["sh", "-c", ". /vault/secrets/minio_credentials && ./uploader"]

  handler:
    container_name: handler
    hostname: handler
    image: elearning-handler
    build:
      context: .
      dockerfile: handler/Dockerfile
    expose:
      - '7070'
    ports:
      - '7070:7070'
    environment:
      PORT: 7070
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_BUCKET: videos
      VIDEO_FORM_FILENAME: myfile
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      ENCRYPTION_KEY: "f51aa89afefee65d71600417a0e5d6af6ac9c42a8929fce3fef07808e2887360"
    depends_on:
      uploader:
        condition: service_started
    volumes:
      - ./volumes/vault/agent:/etc/vault
      - secrets:/vault/secrets
    entrypoint: ["sh", "-c", ". /vault/secrets/minio_credentials && ./handler"]

  vault:
    image: vault:1.13.3
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      VAULT_ADDR: http://vault:8200
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: [ "CMD", "vault", "status" ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 5s

  vaultsetup:
    image: vault:1.13.3
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      VAULT_ADDR: http://vault:8200
    cap_add:
      - IPC_LOCK
    command: sh -c "vault login root && vault kv put secret/minio user=minioadmin password=minioadmin"
    depends_on:
      vault:
        condition: service_healthy

  vault-agent:
    image: vault:1.13.3
    command: agent -config=/etc/vault/config.hcl
    cap_add:
      - IPC_LOCK
    volumes:
      - ./volumes/vault/agent:/etc/vault
      - secrets:/vault/secrets
    healthcheck:
      test: ["CMD", "stat", "/etc/vault/templates/minio_credentials.ctmpl"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 5s
    depends_on:
      vaultsetup:
        condition: service_completed_successfully

  minio:
    container_name: minio
    hostname: minio
    image: minio/minio
    ports:
      - '9000:9000'
      - '9001:9001'
    expose:
      - 9000
      - 9001
    volumes:
      - 'minio_data:/data'
      - ./volumes/vault/agent:/etc/vault
      - secrets:/vault/secrets
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    command: [ "minio", "server", "/data"]

  miniosetup:
    container_name: miniosetup
    hostname: miniosetup
    image: minio/minio
    entrypoint: [ "sh", "-c", "mc alias set minio http://minio:9000 minioadmin minioadmin &&
      mc mb --ignore-existing minio/videos && mc mb --ignore-existing minio/backup"]
    depends_on:
      - minio
    volumes:
      - secrets:/vault/secrets

  nats:
    container_name: nats
    hostname: nats
    image: nats:2-alpine
    ports:
      - '4222:4222'
      - '8222:8222'
    command:
      - -js
      - -m
      - '8222'
      - -sd
      - /var/lib/nats/data
      - --user
      - admin
      - --pass
      - admin
    volumes:
      - 'jsdata:/var/lib/nats/data'

  natssetup:
    container_name: natssetup
    hostname: natssetup
    image: bitnami/natscli
    entrypoint: [ "sh", "-c", "nats stream add events --server nats://admin:admin@nats:4222 --subjects \"videos.*\" 
    --storage file --retention limits --max-msgs=-1 --max-bytes=-1 --max-age=0 --max-msg-size=-1 --discard old --defaults"]
    depends_on:
      - nats
  
  postgres:
    image: postgres:14-alpine
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=videos
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d videos -U postgres"]
      interval: 10s
      timeout: 60s
      retries: 10
      start_period: 3s  

  postgresssetup:
    image: gomicro/goose:3.7.0
    volumes:
      - ./db/migrations:/migrations
    environment:
      PGUSER: postgres
      GOOSE_DRIVER: postgres 
      GOOSE_DBSTRING: postgresql://postgres:5432/videos?user=postgres&password=postgres
      GOOSE_MIGRATION_DIR: /migrations
    entrypoint: ["sh", "-c", "goose up"]
    depends_on:
      postgres:
        condition: service_healthy

  jaeger:
    image: jaegertracing/all-in-one:1.22
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "14269:14269"
      - "14268:14268"
      - "14250:14250"
      - "16686:16686"
      - "4317:4317"       
      - "4318:4318"       
    environment:
      COLLECTOR_OTLP_ENABLED: true 
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./volumes/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_LOG_LEVEL=error
    volumes:
      - ./volumes/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./volumes/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./volumes/grafana/dashboards:/var/lib/grafana/dashboards

  change-vol-permissions:
    image: ubuntu:22.04
    user: "root"
    volumes:
      - secrets:/tmp/vol
    command: chmod 777 /tmp/vol

  opa:
    image: openpolicyagent/opa:latest
    ports:
      - "8181:8181"
    volumes:
      - ./volumes/opa/policy.rego:/etc/opa/policy.rego
      - ./volumes/opa/config.yaml:/etc/opa/config.yaml
    command: ["run", "--server", "--config-file=/etc/opa/config.yaml", "/etc/opa/policy.rego"]
    depends_on:
      jaeger:
        condition: service_started

volumes:
  minio_data:
    driver: local
  jsdata:
    driver: local
  postgres_data:
    driver: local
  secrets:
    driver: local